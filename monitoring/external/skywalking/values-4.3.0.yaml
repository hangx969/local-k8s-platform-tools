elasticsearch:
  antiAffinity: soft
  antiAffinityTopologyKey: kubernetes.io/hostname
  clusterHealthCheckParams: wait_for_status=green&timeout=1s
  clusterName: es-cluster
  config:
    host: elasticsearch
    password: admin
    port:
      http: 9200
    user: admin
  enabled: true
  esConfig: {}
  esJavaOpts: -Xmx1g -Xms1g
  esMajorVersion: "7"
  extraEnvs: []
  extraInitContainers: ""
  extraVolumeMounts: ""
  extraVolumes: ""
  fsGroup: ""
  fullnameOverride: ""
  httpPort: 9200
  image: docker.elastic.co/elasticsearch/elasticsearch
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []
  imageTag: 7.5.1
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - chart-example.local
    path: /
    tls: []
  initResources: {}
  keystore: []
  labels: {}
  lifecycle: {}
  masterService: ""
  masterTerminationFix: false
  maxUnavailable: 1
  minimumMasterNodes: 2
  nameOverride: ""
  networkHost: 0.0.0.0
  nodeAffinity: {}
  nodeGroup: master
  nodeSelector: {}
  persistence:
    annotations: {}
    enabled: true
  podAnnotations: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  podSecurityPolicy:
    create: false
    name: ""
    spec:
      fsGroup:
        rule: RunAsAny
      privileged: true
      runAsUser:
        rule: RunAsAny
      seLinux:
        rule: RunAsAny
      supplementalGroups:
        rule: RunAsAny
      volumes:
      - secret
      - configMap
      - persistentVolumeClaim
  priorityClassName: ""
  protocol: http
  rbac:
    create: false
    serviceAccountName: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 3
    timeoutSeconds: 5
  replicas: 3
  resources:
    limits:
      cpu: 2000m
      memory: 3Gi
    requests:
      cpu: 100m
      memory: 2Gi
  roles:
    data: "true"
    ingest: "true"
    master: "true"
  schedulerName: ""
  secretMounts: []
  securityContext:
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 1000
  service:
    annotations: {}
    httpPortName: http
    labels: {}
    labelsHeadless: {}
    nodePort: ""
    transportPortName: transport
    type: ClusterIP
  sidecarResources: {}
  sysctlInitContainer:
    enabled: true
  sysctlVmMaxMapCount: 262144
  terminationGracePeriod: 120
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Equal"
      effect: "NoSchedule"
  transportPort: 9300
  updateStrategy: RollingUpdate
  volumeClaimTemplate:
    storageClassName: sc-nfs
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
esInit:
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
fullnameOverride: ""
imagePullSecrets: []
initContainer:
  image: busybox
  tag: "1.28"
nameOverride: ""
oap:
  antiAffinity: soft
  dynamicConfigEnabled: false
  env: null
  envoy:
    als:
      enabled: false
  image:
    pullPolicy: IfNotPresent
    repository: skywalking.docker.scarf.sh/apache/skywalking-oap-server
    tag: 10.2.0
  initEs: true
  javaOpts: -Xmx2g -Xms2g
  name: oap
  nodeAffinity: {}
  nodeSelector: {}
  ports:
    grpc: 11800
    rest: 12800
  replicas: 1
  resources:
    limits:
      cpu: 2000m
      memory: 3Gi
    requests:
      cpu: 100m
      memory: 2Gi
  service:
    type: ClusterIP
  storageType: elasticsearch
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Equal"
      effect: "NoSchedule"
satellite:
  antiAffinity: soft
  enabled: false
  env: null
  image:
    pullPolicy: IfNotPresent
    repository: skywalking.docker.scarf.sh/apache/skywalking-satellite
    tag: null
  name: satellite
  nodeAffinity: {}
  nodeSelector: {}
  podAnnotations: null
  ports:
    grpc: 11800
    prometheus: 1234
  replicas: 1
  resources: {}
  service:
    type: ClusterIP
  tolerations: []
serviceAccounts:
  oap: null
ui:
  image:
    pullPolicy: IfNotPresent
    repository: skywalking.docker.scarf.sh/apache/skywalking-ui
    tag: 10.2.0
  ingress:
    annotations: {}
    enabled: false
    hosts: []
    path: /
    tls: []
  name: ui
  nodeAffinity: {}
  nodeSelector: {}
  replicas: 1
  service:
    annotations: {}
    externalPort: 80
    internalPort: 8080
    type: NodePort
  tolerations: []
