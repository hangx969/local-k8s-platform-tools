loki:
  # Should authentication be enabled
  auth_enabled: false
  limits_config:
    retention_period: 744h
    split_queries_by_interval: 24h
  commonConfig:
    replication_factor: 1
  # -- Storage config. Providing this will automatically populate all necessary storage configs in the templated config.
  storage:
    type: filesystem
  # -- Check https://grafana.com/docs/loki/latest/configuration/#ruler for more info on configuring ruler
  rulerConfig:
    storage:
      type: local
      local:
        directory: /var/loki/rules
    alertmanager_url: http://kube-prometheus-stack-alertmanager.monitoring.svc:9093
    enable_api: true
    ring:
      kvstore:
        store: inmemory
    wal:
      dir: /var/loki/wal
    remote_write:
      enabled: true
      client:
        url: http://kube-prometheus-stack-prometheus.monitoring.svc:9090/api/v1/write
  # -- Additional query scheduler config
  query_scheduler:
    max_outstanding_requests_per_tenant: 10000
  # --  Optional compactor configuration
  compactor:
    retention_enabled: true

gateway:
  enabled: false

monitoring:
  selfMonitoring:
    enabled: false
    grafanaAgent:
      # -- Controls whether to install the Grafana Agent Operator and its CRDs.
      # Note that helm will not install CRDs if this flag is enabled during an upgrade.
      # In that case install the CRDs manually from https://github.com/grafana/agent/tree/main/production/operator/crds
      installOperator: false
  # disable loki canary because it is causing more load to loki than everything else combined
  lokiCanary:
    enabled: false

singleBinary:
  replicas: 1
  autoscaling:
    # -- Enable autoscaling
    enabled: true
    # -- Minimum autoscaling replicas for the single binary
    minReplicas: 1
    # -- Maximum autoscaling replicas for the single binary
    maxReplicas: 3
    # -- Target CPU utilisation percentage for the single binary
    targetCPUUtilizationPercentage: 70
    # -- Target memory utilisation percentage for the single binary
    targetMemoryUtilizationPercentage: 70

  extraVolumeMounts:
  - name: loki-rules
    mountPath: /var/loki/rules/fake
  # -- Volumes to add to the single binary pods
  extraVolumes:
  - name: loki-rules
    configMap:
      name: loki-recording-rules
  # -- Resource requests and limits for the single binary
  resources:
    limits:
      cpu: 300m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 256Mi

  persistence:
    enableStatefulSetAutoDeletePVC: false
    enabled: true
    size: 1Gi
    storageClass: sc-nfs

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  #    nginx.ingress.kubernetes.io/auth-type: basic
  #    nginx.ingress.kubernetes.io/auth-secret: loki-distributed-basic-auth
  #    nginx.ingress.kubernetes.io/auth-secret-type: auth-map
  #    nginx.ingress.kubernetes.io/configuration-snippet: |
  #      proxy_set_header X-Scope-OrgID $remote_user;
  labels: {}
  #    blackbox.monitoring.exclude: "true"
  paths:
    write:
      - /api/prom/push
      - /loki/api/v1/push
    read:
      - /api/prom/tail
      - /loki/api/v1/tail
      - /loki/api
      - /api/prom/rules
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
    singleBinary:
      - /api/prom/push
      - /loki/api/v1/push
      - /api/prom/tail
      - /loki/api/v1/tail
      - /loki/api
      - /api/prom/rules
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
  # -- Hosts configuration for the ingress, passed through the `tpl` function to allow templating
  hosts:
    - loki.example.com
  # -- TLS configuration for the ingress. Hosts passed through the `tpl` function to allow templating
  tls: []

test:
  enabled: false

extraObjects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: loki-recording-rules
    namespace: monitoring
  labels:
    loki_rule: 'true'
  data:
    loki-recording-rules.yaml: |-
      groups:
      - name: logs_size
        interval: 1m
        rules:
        - record: loki:rule:logs:bytes_rate:1m
          expr: |
            sum by(namespace, container) (bytes_rate({namespace=~".+"}[1m]))
        - record: loki:rule:logs:rate:1m
          expr: |
            sum by(namespace, container) (rate({namespace=~".+"}[1m]))
        - record: loki:rule:warnings:rate:1m
          expr: |
            sum by(namespace, container) (rate({namespace=~".+"} |~ `(?i)(warn|warning)[\s:=]` [1m]))
        - record: loki:rule:errors:rate:1m
          expr: |
            sum by(namespace, container) (rate({namespace=~".+"} |~ `(?i)error[\s:=]` [1m]))

sidecar:
  rules:
    enabled: false