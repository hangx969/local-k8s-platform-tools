name: Deploy Specific Helm Charts (Windows)
# Migrated from Linux to Windows

on:
  workflow_call:
  workflow_dispatch:

defaults:
  run:
    shell: pwsh # Changed from bash to PowerShell for Windows

env:
  # Define kubeconfig file path and name - Windows style path
  KUBECONFIG: '${{ github.workspace }}\.kube\kubeconfig'

  # Define harbor URL
  harborURL: 'harbor.hanxux.local'
  harborProjectName: 'platform-tools-local'

  # Define helm chart versions
  # Note that the helm chart version of cert-manager and kubed are with 'v' prefix by default
  harborVersion: '1.17.0'
  configSyncerVersion: 'v0.13.2'
  kyvernoVersion: '3.2.7'
  vpaVersion: '4.7.1'

jobs:
  helm-upgrade:
    runs-on: windows-local # Changed from windows-latest to windows-local

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate kubeconfig from repository secret
        run: |
          New-Item -ItemType Directory -Path "${{ github.workspace }}\.kube" -Force
          $base64String = "${{ secrets.HP_LOCAL_KUBECONFIG}}"
          $bytes = [System.Convert]::FromBase64String($base64String)
          $decodedString = [System.Text.Encoding]::UTF8.GetString($bytes)
          $decodedString | Out-File -FilePath $env:KUBECONFIG -Encoding UTF8

      - name: Login Harbor
        run: |
          helm registry login '${{ env.harborURL }}' --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} --insecure

    # Helm charts that we want to upgrade manually, not by the commit triggered.
    # Because even if there are no updates at all, they will still be upgraded due to some "checksum" changes.
      - name: Upgrade Config-syncer
        run: |
          $env:helmChartVersion = '${{env.configSyncerVersion}}'
          $env:helmRepoName = 'appscode'
          $env:helmChartName = 'kubed'

          helm upgrade -i config-syncer -n config-syncer oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 --version $env:helmChartVersion -f ./base/external/config-syncer/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Harbor
        run: |
          $env:helmChartVersion = '${{env.harborVersion}}'
          $env:helmRepoName = 'harbor'
          $env:helmChartName = 'harbor'

          helm upgrade -i harbor -n harbor oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 --version $env:helmChartVersion -f ./base/external/harbor/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Kyverno
        run: |
          $env:helmChartVersion = '${{env.kyvernoVersion}}'
          $env:helmRepoName = 'kyverno'
          $env:helmChartName = 'kyverno'

          helm upgrade -i kyverno -n kyverno oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 --version $env:helmChartVersion -f ./base/external/kyverno/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade VPA
        run: |
          $env:helmChartVersion = '${{env.vpaVersion}}'
          $env:helmRepoName = 'fairwinds-stable'
          $env:helmChartName = 'vpa'

          helm upgrade -i vpa -n vpa oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 --version $env:helmChartVersion -f ./base/external/vpa/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG
