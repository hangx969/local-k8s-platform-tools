name: Deploy Base Helm Charts (Windows)
# Migrated from Linux to Windows

on:
  workflow_call:
  workflow_dispatch:

defaults:
  run:
    shell: pwsh # Changed from bash to PowerShell for Windows

env:
  # Define kubeconfig file path and name - Windows style path
  KUBECONFIG: '${{ github.workspace }}\.kube\kubeconfig'

  # Define harbor URL
  harborURL: 'harbor.hanxux.local'
  harborProjectName: 'platform-tools-local'

  # Define helm chart versions
  capsuleVersion: '0.10.0'
  certManagerVersion: 'v1.18.2'
  externalDNSVersion: '1.17.0'
  externalSecretsVersion: '0.18.2'
  harborVersion: '1.16.0'
  nginxVersion: '4.13.0'
  kyvernoVersion: '3.4.4'
  nfsSubdirExternalProvisionerVersion: '4.0.18'
  oauth2proxyVersion: '7.12.19'
  policyReportVersion: '3.3.1'
  reloaderVersion: '2.1.5'
  trivyOperatorVersion: '0.29.3'
  configSyncerVersion: 'v0.13.2'
  vpaVersion: '4.7.1'
  goldilocksVersion: '9.0.1'
  pactVersion: '1.1.0'
  jenkinsVersion: '5.8.68'

jobs:
  helm-upgrade:
    runs-on: windows-local # Changed from windows-latest to windows-local

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate kubeconfig from repository secret
        run: |
          New-Item -ItemType Directory -Path "${{ github.workspace }}\.kube" -Force
          $base64String = "${{ secrets.HP_LOCAL_KUBECONFIG}}"
          $bytes = [System.Convert]::FromBase64String($base64String)
          $decodedString = [System.Text.Encoding]::UTF8.GetString($bytes)
          $decodedString | Out-File -FilePath $env:KUBECONFIG -Encoding UTF8

      - name: Login Harbor
        run: |
          helm registry login '${{ env.harborURL }}' --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} --insecure

    ###=======Upgrade Base ns Helm Charts=======###
      - name: Upgrade Base ns
        run: |
          $env:chartDir = './base/helm-charts/base-ns'

          helm upgrade -i commoninfra -n kube-system $env:chartDir --history-max 5 --values $env:chartDir/values.yaml --kubeconfig $env:KUBECONFIG

    ###=======Upgrade External Helm Charts=======###
      - name: Upgrade Capsule
        run: |
          $env:helmChartVersion = '${{env.capsuleVersion}}'
          $env:helmRepoName = 'projectcapsule'
          $env:helmChartName = 'capsule'

          helm pull oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --insecure-skip-tls-verify

          Write-Host "Extract CRDs"
          tar xvf "$env:helmChartName-$env:helmChartVersion.tgz" capsule/crds

          Write-Host "Diff CRDs"
          kubectl diff -f capsule/crds/ -R --kubeconfig $env:KUBECONFIG

          Write-Host "Install CRDs"
          kubectl apply --server-side -f capsule/crds/ -R --kubeconfig $env:KUBECONFIG

          helm upgrade -i capsule -n capsule-system oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./base/external/capsule/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Capsule Tenants
        run: |
          $env:chartDir = './base/helm-charts/capsule-tenants'

          helm upgrade -i capsule-tenants -n capsule-system $env:chartDir --history-max 5 --values $env:chartDir/values.yaml --kubeconfig $env:KUBECONFIG

      - name: Upgrade Cert-manager
        run: |
          $env:helmChartVersion = '${{env.certManagerVersion}}'
          $env:helmRepoName = 'jetstack'
          $env:helmChartName = 'cert-manager'

          helm upgrade -i cert-manager -n cert-manager oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./base/external/cert-manager/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade cert-manager Certificates
        run: |
          $env:chartDir = './base/helm-charts/cert-manager-certificates'

          helm upgrade -i cert-manager-certificates -n cert-manager $env:chartDir --history-max 5 --values $env:chartDir/values.yaml --kubeconfig $env:KUBECONFIG

      - name: Upgrade Ingress-nginx
        run: |
          $env:helmChartVersion = '${{env.nginxVersion}}'
          $env:helmRepoName = 'ingress-nginx'
          $env:helmChartName = 'ingress-nginx'

          helm upgrade -i ingress-nginx -n ingress-nginx oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/ingress-nginx/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade External DNS
        run: |
          $env:helmChartVersion = '${{env.externalDNSVersion}}'
          $env:helmRepoName = 'external-dns'
          $env:helmChartName = 'external-dns'

          helm upgrade -i external-dns -n external-dns oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/external-dns/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade External Secrets
        run: |
          $env:helmChartVersion = '${{env.externalSecretsVersion}}'
          $env:helmRepoName = 'external-secrets'
          $env:helmChartName = 'external-secrets'

          helm upgrade -i external-secrets -n external-secrets oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/external-secrets/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Oauth2-proxy
        run: |
          $env:helmChartVersion = '${{env.oauth2proxyVersion}}'
          $env:helmRepoName = 'oauth2-proxy'
          $env:helmChartName = 'oauth2-proxy'
          $env:REDIS_PASSWORD = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret --namespace "oauth2-proxy" oauth2-proxy-redis --kubeconfig $env:KUBECONFIG -o jsonpath="{.data.redis-password}")))

          helm upgrade -i oauth2-proxy -n oauth2-proxy oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/oauth2-proxy/values.yaml --set config.clientID='${{ secrets.OAUTH2PROXY_CLIENT_ID}}' --set config.clientSecret='${{ secrets.OAUTH2PROXY_CLIENT_SECRET}}' --set config.cookieSecret='${{ secrets.OAUTH2PROXY_COOKIE_SECRET}}' --set global.redis.password=$env:REDIS_PASSWORD --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Trivy Operator
        run: |
          $env:helmChartVersion = '${{env.trivyOperatorVersion}}'
          $env:helmRepoName = 'aqua'
          $env:helmChartName = 'trivy-operator'

          helm pull oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --insecure-skip-tls-verify

          Write-Host "Extract CRDs"
          tar xvf "$env:helmChartName-$env:helmChartVersion.tgz" trivy-operator/crds

          Write-Host "Diff CRDs"
          kubectl diff -f trivy-operator/crds/ -R --kubeconfig $env:KUBECONFIG

          Write-Host "Install CRDs"
          kubectl apply --server-side -f trivy-operator/crds/ -R --kubeconfig $env:KUBECONFIG

          helm upgrade -i trivy-operator -n trivy-system oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/trivy-operator/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      # - name: Upgrade Kyverno
      #   run: |
      #     $env:helmChartVersion = '${{env.kyvernoVersion}}'
      #     $env:helmRepoName = 'kyverno'
      #     $env:helmChartName = 'kyverno'

      #     helm upgrade -i kyverno -n kyverno oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/kyverno/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Kyverno Policy Reporter
        run: |
          $env:helmChartVersion = '${{env.policyReportVersion}}'
          $env:helmRepoName = 'policy-reporter'
          $env:helmChartName = 'policy-reporter'

          helm upgrade -i policy-reporter -n policy-reporter oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/policy-reporter/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Test Kyverno Policies
        run: |
          $env:PATH = "$env:PATH;$env:KREW_ROOT\bin"

          # To set pipeline to exit on any policy assessment failed, add `$ErrorActionPreference = "Stop"`
          # Validate policies, note that "test ." has configured the path of test files
          kubectl kyverno test . -f kyverno-test-image.yaml
          kubectl kyverno test . -f kyverno-test-resource.yaml
          kubectl kyverno test . -f kyverno-test-mutate-security.yaml
          kubectl kyverno test . -f kyverno-test-validate-security.yaml
          kubectl kyverno test . -f kyverno-test-validate-security-baseline.yaml
          kubectl kyverno test . -f kyverno-test-traceability.yaml

      - name: Upgrade Reloader
        run: |
          $env:helmChartVersion = '${{env.reloaderVersion}}'
          $env:helmRepoName = 'stakater'
          $env:helmChartName = 'reloader'

          helm upgrade -i reloader -n reloader oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./base/external/reloader/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Nfs-subdir-external-provisioner
        run: |
          $env:helmChartVersion = '${{env.nfsSubdirExternalProvisionerVersion}}'
          $env:helmRepoName = 'nfs-subdir-external-provisioner'
          $env:helmChartName = 'nfs-subdir-external-provisioner'

          helm upgrade -i nfs-subdir-external-provisioner -n default oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --history-max 5 -f ./base/external/nfs-subdir-external-provisioner/values.yaml --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade goldilocks
        run: |
          $env:helmChartVersion = '${{env.goldilocksVersion}}'
          $env:helmRepoName = 'fairwinds-stable'
          $env:helmChartName = 'goldilocks'

          helm upgrade -i goldilocks -n goldilocks oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion -f ./base/external/goldilocks/values.yaml --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade pact-broker
        run: |
          $env:helmChartVersion = '${{env.pactVersion}}'
          $env:helmRepoName = 'pact-broker'
          $env:helmChartName = 'pact-broker'

          helm upgrade -i pact-broker -n observability oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion -f ./base/external/pact-broker/values.yaml --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade jenkins
        run: |
          $env:helmChartVersion = '${{env.jenkinsVersion}}'
          $env:helmRepoName = 'jenkins'
          $env:helmChartName = 'jenkins'

          helm upgrade -i jenkins -n jenkins oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion -f ./base/external/jenkins/values.yaml --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG
