name: Deploy Monitoring Helm Charts (Windows)
# Migrated from Linux to Windows

on:
  workflow_call:
  workflow_dispatch:

defaults:
  run:
    shell: pwsh # Changed from bash to PowerShell for Windows

env:
  # Define kubeconfig file path and name - Windows style path
  KUBECONFIG: '${{ github.workspace }}\.kube\kubeconfig'

  # Define harbor URL
  harborURL: 'harbor.hanxux.local'
  harborProjectName: 'platform-tools-local'

  # Define helm chart versions
  # The syntax of the version is keeping the same as the github release file name
  lokiVersion: '5.48.0'
  promtailVersion: '6.15.5'
  kubePrometheusStackVersion: '59.1.0'
  tempoVersion: '1.16.0'
  grafanaAgentVersion: '0.42.0'
  jaegerVersion: '3.4.1'

jobs:
  helm-upgrade:
    runs-on: windows-local # Changed from windows-latest to windows-local

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate kubeconfig from repository secret
        run: |
          # Linux command: mkdir -p '${{ github.workspace }}/.kube' && echo '${{ secrets.HP_LOCAL_KUBECONFIG}}' | base64 -d > $KUBECONFIG && chmod 600 $KUBECONFIG
          New-Item -ItemType Directory -Path '${{ github.workspace }}\.kube' -Force
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${{ secrets.HP_LOCAL_KUBECONFIG}}')) | Out-File -FilePath $env:KUBECONFIG -Encoding UTF8

      - name: Login Harbor
        run: |
          # Linux command: helm registry login '${{ env.harborURL }}' --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} --insecure
          helm registry login '${{ env.harborURL }}' --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} --insecure

      ###===========helm Upgrade External Helm Charts===============###
      - name: Upgrade Loki
        run: |
          # Linux command: export helmChartVersion=${{env.lokiVersion}}; export helmRepoName='grafana'; export helmChartName='loki'
          $env:helmChartVersion = '${{env.lokiVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'loki'

          helm upgrade -i loki -n observability oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./monitoring/external/loki/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Promtail
        run: |
          # Linux command: export helmChartVersion=${{env.promtailVersion}}; export helmRepoName='grafana'; export helmChartName='promtail'
          $env:helmChartVersion = '${{env.promtailVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'promtail'

          helm upgrade -i promtail -n observability oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./monitoring/external/promtail/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Kube Prometheus Stack
        run: |
          # Linux command: export helmChartVersion=${{env.kubePrometheusStackVersion}}; export helmRepoName='prometheus-community'; export helmChartName='kube-prometheus-stack'
          $env:helmChartVersion = '${{env.kubePrometheusStackVersion}}'
          $env:helmRepoName = 'prometheus-community'
          $env:helmChartName = 'kube-prometheus-stack'

          helm upgrade -i kube-prometheus-stack -n observability oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./monitoring/external/kube-prometheus-stack/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Tempo
        run: |
          # Linux command: export helmChartVersion=${{env.tempoVersion}}; export helmRepoName='grafana'; export helmChartName='tempo'
          $env:helmChartVersion = '${{env.tempoVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'tempo'

          helm upgrade -i tempo -n observability oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./monitoring/external/tempo/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Grafana Agent
        run: |
          # Linux command: export helmChartVersion=${{env.grafanaAgentVersion}}; export helmRepoName='grafana'; export helmChartName='grafana-agent'
          $env:helmChartVersion = '${{env.grafanaAgentVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'grafana-agent'

          helm upgrade -i grafana-agent -n observability oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --history-max 5 -f ./monitoring/external/grafana-agent/values.yaml --version $env:helmChartVersion --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      ###===========helm Upgrade Internal Helm Charts===============###
      - name: Upgrade Grafana Dashboards
        run: |
          # Linux command: export chartDir='./monitoring/helm-charts/grafana-dashboards'
          $env:chartDir = './monitoring/helm-charts/grafana-dashboards'

          helm upgrade -i grafana-dashboards -n observability $env:chartDir --history-max 5 --values $env:chartDir/values.yaml --kubeconfig $env:KUBECONFIG

      # - name: Upgrade Grafana Datasources
      #   run: |
      #     # Linux command: export chartDir='./monitoring/helm-charts/grafana-datasources'
      #     $env:chartDir = './monitoring/helm-charts/grafana-datasources'

      #     helm upgrade -i grafana-datasources -n observability $env:chartDir --history-max 5 --values $env:chartDir/values.yaml --kubeconfig $env:KUBECONFIG

      - name: Upgrade Prometheus Rules
        run: |
          # Linux command: export chartDir='./monitoring/helm-charts/prometheus-rules'
          $env:chartDir = './monitoring/helm-charts/prometheus-rules'

          helm upgrade -i prometheus-rules -n observability $env:chartDir --history-max 5 --values $env:chartDir/values.yaml --kubeconfig $env:KUBECONFIG
