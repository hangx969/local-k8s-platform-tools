name: Deploy Monitoring Helm Charts (Windows)
# Migrated from Linux to Windows

on:
  workflow_call:
  workflow_dispatch:

defaults:
  run:
    shell: pwsh # Changed from bash to PowerShell for Windows

env:
  # Define kubeconfig file path and name - Windows style path
  KUBECONFIG: '${{ github.workspace }}\.kube\kubeconfig'

  # Define harbor URL
  harborURL: 'harbor.hanxux.local'
  harborProjectName: 'platform-tools-local'

  # Define helm chart versions
  # The syntax of the version is keeping the same as the github release file name
  lokiVersion: '6.31.0'
  promtailVersion: '6.17.0'
  kubePrometheusStackVersion: '75.10.0'
  tempoVersion: '1.23.2'
  grafanaAgentVersion: '0.42.0'
  jaegerVersion: '3.4.1'
  eckVersion: '3.0.0'
  kafkaVersion: '30.1.8'

jobs:
  helm-upgrade:
    runs-on: windows-local # Changed from windows-latest to windows-local

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate kubeconfig from repository secret
        run: |
          New-Item -ItemType Directory -Path "${{ github.workspace }}\.kube" -Force
          $base64String = "${{ secrets.HP_LOCAL_KUBECONFIG}}"
          $bytes = [System.Convert]::FromBase64String($base64String)
          $decodedString = [System.Text.Encoding]::UTF8.GetString($bytes)
          $decodedString | Out-File -FilePath $env:KUBECONFIG -Encoding UTF8

      - name: Login Harbor
        run: |
          helm registry login '${{ env.harborURL }}' --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} --insecure

      ###===========helm Upgrade External Helm Charts===============###
      - name: Upgrade kube-prometheus-stack
        run: |
          $env:helmChartVersion = '${{env.kubePrometheusStackVersion}}'
          $env:helmRepoName = 'prometheus-community'
          $env:helmChartName = 'kube-prometheus-stack'

          helm pull oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName --version $env:helmChartVersion --insecure-skip-tls-verify

          Write-Host "Extract CRDs"
          tar xvf "$env:helmChartName-$env:helmChartVersion.tgz" kube-prometheus-stack/charts/crds/crds
          Write-Host "Diff CRDs"
          kubectl diff -f kube-prometheus-stack/charts/crds/crds/ -R --kubeconfig $env:KUBECONFIG
          Write-Host "Install CRDs"
          kubectl apply --server-side -f kube-prometheus-stack/charts/crds/crds/ -R --kubeconfig $env:KUBECONFIG

          helm upgrade -i kube-prometheus-stack -n monitoring oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/kube-prometheus-stack/values.yaml --version $env:helmChartVersion --history-max 5 --set grafana.adminPassword='${{ secrets.GRAFANA_ADMIN_PASSWORD}}' --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade grafana-agent
        run: |
          $env:helmChartVersion = '${{env.grafanaAgentVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'grafana-agent'

          helm upgrade -i grafana-agent -n monitoring oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/grafana-agent/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade loki
        run: |
          $env:helmChartVersion = '${{env.lokiVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'loki'

          helm upgrade -i loki -n monitoring oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/loki/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade promtail
        run: |
          $env:helmChartVersion = '${{env.promtailVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'promtail'

          helm upgrade -i promtail -n monitoring oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/promtail/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade tempo
        run: |
          $env:helmChartVersion = '${{env.tempoVersion}}'
          $env:helmRepoName = 'grafana'
          $env:helmChartName = 'tempo'

          helm upgrade -i tempo -n monitoring oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/tempo/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade jaeger
        run: |
          $env:helmChartVersion = '${{env.jaegerVersion}}'
          $env:helmRepoName = 'jaegertracing'
          $env:helmChartName = 'jaeger'

          # Create Badger PVC
          kubectl apply -f ./monitoring/external/jaeger/storage/pvc-jaeger.yaml -n monitoring

          # Install Jaeger
          helm upgrade -i jaeger -n monitoring oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/jaeger/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

          # allow slow badger startup
          kubectl patch deployment/jaeger -n monitoring --type='json' -p='[
            {"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/failureThreshold", "value": 100},
            {"op": "replace", "path": "/spec/template/spec/containers/0/livenessProbe/failureThreshold", "value": 100}
          ]'

      - name: Upgrade eck-operator
        run: |
          $env:helmChartVersion = '${{env.eckVersion}}'
          $env:helmRepoName = 'elastic'
          $env:helmChartName = 'eck-operator'

          helm upgrade -i eck-operator -n eck-system oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/eck-operator/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      - name: Upgrade Kafka Helm
        run: |
          $env:helmChartVersion = '${{env.kafkaVersion}}'
          $env:helmRepoName = 'bitnami'
          $env:helmChartName = 'kafka'

          helm upgrade -i kafka -n logging oci://${{ env.harborURL }}/${{ env.harborProjectName }}/$env:helmRepoName/$env:helmChartName -f ./monitoring/external/kafka/values.yaml --version $env:helmChartVersion --history-max 5 --insecure-skip-tls-verify --kubeconfig $env:KUBECONFIG

      ###===========helm Upgrade Custom Helm Charts===============###
      - name: Upgrade prometheus-rules helm chart
        run: |
          $env:chartDir = './monitoring/helm-charts/prometheus-rules'

          helm upgrade -i prometheus-rules -n monitoring $env:chartDir -f $env:chartDir/values.yaml --history-max 5 --kubeconfig $env:KUBECONFIG

      - name: Upgrade grafana-dashboards helm chart
        run: |
          $env:chartDir = './monitoring/helm-charts/grafana-dashboards'

          helm upgrade -i grafana-dashboards -n monitoring $env:chartDir -f $env:chartDir/values.yaml --history-max 5 --kubeconfig $env:KUBECONFIG

      # - name: Upgrade grafana-datasources helm chart
      #   run: |
      #     $env:chartDir = './monitoring/helm-charts/grafana-datasources'
      #     helm upgrade -i grafana-datasources -n monitoring $env:chartDir -f $env:chartDir/values.yaml --history-max 5 --kubeconfig $env:KUBECONFIG